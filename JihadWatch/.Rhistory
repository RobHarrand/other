# pop Disease:
numD <- round(POP * PRV)
if(useSobol) {
testDF <- rbind(testDF,
data.frame(
tp=popD_Mean+popD_SD*sobol(numD, 1, scrambling = 2, normal = TRUE),
state="D"
)
)
} else {
testDF <- rbind(testDF,
data.frame(
tp=rnorm(numD, mean = popD_Mean, sd = popD_SD),
state="D"
)
)
}
# pop Healthy:
numH <- POP - round(POP * PRV)
if(useSobol) {
testDF <- rbind(testDF,
data.frame(
tp=popH_Mean+popH_SD*sobol(ceiling(numH * (1-popH_outlier)), 1, scrambling = 2, normal = TRUE),
state="H"
)
)
} else {
testDF <- rbind(testDF,
data.frame(
tp=rnorm(ceiling(numH * (1-popH_outlier)), mean = popH_Mean, sd = popH_SD),
state="H"
)
)
}
if(popH_outlier > 0) {
if(useSobol) {
testDF <- rbind(testDF,
data.frame(
tp=0.2+0.2*sobol(numH - ceiling(numH * (1-popH_outlier)), 1, scrambling = 2, normal = TRUE),
state="H"
)
)
} else {
testDF <- rbind(testDF,
data.frame(
tp=rnorm(numH - ceiling(numH * (1-popH_outlier)), mean = 0.2, sd = 0.2),
state="H"
)
)
}
}
# Buffer test to 0 to 1 using sigmoid transformation
testDF$tp <- sigmoid::sigmoid(testDF$tp)
#testDF$tp <- (tanh((testDF$tp) / 2L) + 1L) / 2L
# histogram plot of two cohorts
g <- ggplot(data=testDF, aes(tp, fill=state))
g <- g + geom_histogram(alpha=0.7, na.rm=TRUE, position = "identity", bins=POP/1000+1)
g <- g + theme_bw()
g <- g + scale_color_manual(values=brewer.pal(9, "Set1"))
g <- g + scale_fill_manual(values=brewer.pal(9, "Set1"))
g <- g + scale_x_continuous(breaks=0:5/5, minor_breaks = 1:20/20)
g <- g + ylab("frequency") + xlab("test parameter")
g
# assemble truth table for all test parameters
CM <- data.frame(thres = seq(0, 1, by=0.01))
histD <- hist(testDF$tp[testDF$state=="D"], breaks=CM$thres, plot=FALSE)
histH <- hist(testDF$tp[testDF$state=="H"], breaks=CM$thres, plot=FALSE)
CM$FN <- c(0, cumsum(histD$counts))
CM$TN <- c(0, cumsum(histH$counts))
CM$FP <- CM$TN[dim(CM)[1]] - CM$TN
CM$TP <- CM$FN[dim(CM)[1]] - CM$FN
# calc derived parameters
CM$Sen <- CM$TP / (CM$TP + CM$FN)
CM$Spc <- CM$TN / (CM$TN + CM$FP)
CM$PPV <- CM$TP / (CM$TP + CM$FP)
CM$NPV <- CM$TN / (CM$TN + CM$FN)
CM$ACC <- (CM$TP + CM$TN) / (CM$TP + CM$TN + CM$FP + CM$FN)
CM$MRK <- CM$PPV + CM$NPV - 1L
CM$INF <- CM$Sen + CM$Spc - 1L
CM$F1 <- 2L * CM$TP / (2L * CM$TP + CM$FP + CM$FN)
CM$MCC <- ((CM$TP * CM$TN) - (CM$FP * CM$FN)) / sqrt((CM$TP + CM$FP) * (CM$TP + CM$FN) * (CM$TN + CM$FP) * (CM$TN + CM$FN))
CM$LRp <- CM$Sen / (1L - CM$Spc)
CM$LRn <- (1L - CM$Sen) / CM$Spc
CM$LRlocal <- c(NA, (CM$Sen[3:(dim(CM)[1])] - CM$Sen[1:(dim(CM)[1] - 2)]) / (CM$Spc[1:(dim(CM)[1] - 2)] - CM$Spc[3:(dim(CM)[1])]), NA)  # local gradient in ROC plot (Sen / 1-Spc)
CM$DOR <- CM$LRp / CM$LRn
CM$RR <- CM$PPV / (1L - CM$NPV)
CM$Oprior <- (CM$TP + CM$FN) / (CM$FP + CM$TN)
CM$O_DE   <- CM$TP / CM$FP
CM$O_DnE  <- CM$FN / CM$TN
# plot params that are on 0-1 scale
CMlong <- gather(CM, name, value, Sen:MCC, factor_key = TRUE)
g <- ggplot(CMlong, aes(x=thres, y=value, col=name))
g <- g + geom_line(size=1.5)
g <- g + theme_bw()
g <- g + scale_color_manual(values=brewer.pal(9, "Set1"))
g <- g + scale_x_continuous(breaks=0:5/5, minor_breaks = 1:20/20)
g <- g + scale_y_continuous(breaks=0:10/10, minor_breaks = 1:40/40)
g <- g + labs(col="parameter")
g <- g + ylab("parameter value") + xlab("threshold")
g
# plot params that best fit on log scale
CM2long <- gather(CM, name, value, LRp:O_DnE, factor_key = TRUE)
g <- ggplot(CM2long, aes(x=thres, y=value, col=name))
g <- g + geom_line(size=1.5)
g <- g + theme_bw()
g <- g + scale_color_manual(values=brewer.pal(9, "Set1")[-6])
g <- g + scale_y_log10(minor_breaks = minor.log.scale,
breaks = major.log.scale,
labels=function(n) {format(n, trim = TRUE, drop0trailing = TRUE, scientific = FALSE)},
limits=c(getlimit2510(min(CM2long$value[!is.na(CM2long$value) & !is.infinite(CM2long$value) & CM2long$value!=0L]), roundUp=FALSE),
getlimit2510(max(CM2long$value[!is.na(CM2long$value) & !is.infinite(CM2long$value) & CM2long$value!=0L]), roundUp=TRUE)) )
g <- g + scale_x_continuous(breaks=0:5/5, minor_breaks = 1:20/20)
g <- g + labs(col="parameter")
g <- g + ylab("parameter value") + xlab("threshold")
g
# # for visualisation only, extract a few test param points for plotting
CMdup <- CM[CM$thres*10 == floor(CM$thres*10) & CM$thres != 0 & CM$thres != 1, ]
CMdup$col <- CMdup$thres
CMdup$col <- factor(CMdup$col)
# ROC plot
g <- ggplot(CM, aes(x=Spc, y=Sen))
g <- g + theme_bw()
g <- g + geom_line(size=1.5, col="black")
g <- g + scale_y_continuous(breaks=0:5/5, minor_breaks = 1:20/20,
limits=c(0, 1))
g <- g + scale_x_reverse(breaks=0:5/5, minor_breaks = 1:20/20, limits=c(1,0))
g <- g + scale_size_continuous(guide=FALSE)
g <- g + coord_fixed()
g <- g + ylab("Sensitivity") + xlab("Specificity")
g <- g + geom_abline(slope = 1, intercept = 1, linetype=2)
g <- g + geom_point(data=CMdup, mapping=aes(x=Spc, y=Sen, fill=col, size=1), shape=21, colour="black")
g <- g + scale_fill_manual(values=brewer.pal(9, "Set1")[c(6:9, 1:5)], guide=guide_legend(title="Threshold", override.aes = list(size=5)))
g <- g + ggtitle("ROC plot")
g
# LR plot
g <- ggplot(CM, aes(x=LRp, y=LRn))
g <- g + theme_bw()
g <- g + geom_line(size=1.5, col="black")
g <- g + scale_y_log10(minor_breaks = minor.log.scale,
breaks = major.log.scale,
labels=function(n) {format(n, trim = TRUE, drop0trailing = TRUE, scientific = FALSE)},
limits=c(getlimit2510(min(CM$LRn[!is.na(CM$LRn) & !is.infinite(CM$LRn) & CM$LRn!=0L]), roundUp=FALSE),
getlimit2510(max(CM$LRn[!is.na(CM$LRn) & !is.infinite(CM$LRn) & CM$LRn!=0L]), roundUp=TRUE))
)
g <- g + scale_x_log10(minor_breaks = minor.log.scale,
breaks = major.log.scale,
labels=function(n) {format(n, trim = TRUE, drop0trailing = TRUE, scientific = FALSE)},
limits=c(getlimit2510(min(CM$LRp[!is.na(CM$LRp) & !is.infinite(CM$LRp) & CM$LRp!=0L]), roundUp=FALSE),
getlimit2510(max(CM$LRp[!is.na(CM$LRp) & !is.infinite(CM$LRp) & CM$LRp!=0L]), roundUp=TRUE))
)
g <- g + geom_point(data=CMdup, mapping=aes(x=LRp, y=LRn, fill=col, size=1), shape=21, colour="black")
g <- g + scale_fill_manual(values=brewer.pal(9, "Set1")[c(6:9, 1:5)], guide=guide_legend(title="Threshold", override.aes = list(size=5)))
g <- g + scale_size_continuous(guide=FALSE)
g <- g + ylab("Negative Likelihood Ratio") + xlab("Positive Likelihood Ratio")
g <- g + coord_fixed()
g <- g + ggtitle("LR plot")
g
source('C:/Users/rob.harrand/AppData/Local/Microsoft/Windows/INetCache/Content.Outlook/JCTFNRB5/Simulation.R')
getwd()
file = read.csv("Book2.csv")
View(file)
file$OBS_ID
file$DOG_ID
file = read.csv("AllcLBT.csv")
View(file)
hist(file$CRP)
?hist
hist(file$CRP)
hist(file$CRP, breaks = 100)
hist(file$CRP, breaks = 100, main = "Histogram of CRP")
hist(file$CRP, breaks = 100, main = "Histogram of CRP", xlab = "CRP")
hist(file$CRP, breaks = 100, main = "Histogram of CRP", xlab = "CRP", col = 'red')
mean(file$CRP)
mean(file$CRP, na.rm = T)
median(file$CRP,)
median(file$CRP, na.rm = T)
sd(file$CRP, na.rm = T)
plot(file$CRP, file$Haptoglobin)
plot(file$CRP, file$Haptoglobin, log = "xy")
summary(file)
shiny::runApp('C:/Users/rob.harrand/Dropbox/data.world/hdi/non-plotly')
runApp('C:/Users/rob.harrand/Dropbox/data.world/hdi/non-plotly')
runApp('C:/Users/rob.harrand/Dropbox/data.world/hdi/non-plotly')
x=c(0.26,
0.11,
0.17,
4.34,
2.23,
0.45,
0.4,
0.12,
1.77,
1.08,
0.31,
0.41,
0.45,
0.63,
0.67,
0.29,
0.52,
0.43,
0.16,
0.65)
y=c(0.12,
0.17,
0.23,
0.28,
0.4,
0.45,
0.67,
0.75,
0.8,
0.81,
1.96,
2.23,
2.53,
2.61,
3.14,
3.73,
7.03,
9.63,
9.79,
19.21,
145.88)
wilcox.test(x,y)
library(twitteR)
?tweet
#library('data.table')
dt = read.csv('Dummy_database_20170530.csv', stringsAsFactors = F)
#table(dt$MedicationDietDetails == "")
ap_rows = grep('apoquel|oclacitinib',  dt$MedicationDietDetails,ignore.case = T)
non_ap_rows = grep('apoquel|oclacitinib',  dt$MedicationDietDetails,ignore.case = T, invert = T)
#ap_rows = grep('apoquel|oclacitinib',  dt$Comments,ignore.case = T)
dt$Date.received = as.Date(dt$Date.received, format = '%d/%m/%Y')
dt$Month = month(dt$Date.received)
dt$Year = year(dt$Date.received)
#ex = is.na(dt$Year)
#dt = dt[!ex,]
ap_data = dt[ap_rows,]
non_ap_data = dt[non_ap_rows,]
non_ap_data$Date.received = as.Date(non_ap_data$Date.received, format = '%d/%m/%Y')
non_ap_data = non_ap_data[non_ap_data$Date.received > "2015-09-22",] #DATE RESTRICTION!
dt = read.csv('Dummy_database_20170530.csv', stringsAsFactors = F)
library(twitteR)
library(ROAuth)
library(httr)
library(streamR)
library(translateR)
library('wordcloud')
library('tm')
setwd('C:\\Users\\rob.harrand\\Dropbox\\Kaggle\\JihadWatch')
# STREAMING
# The following four lines assign the right values to the variables that
# are needed for the API call.
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
# The string within the quotation marks has to be replaced with the actual
# consumerKey and consumerSecret.
consumerKey <- "UNebmewdL7fjHIyVPkuQGjVOO"
consumerSecret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
# Set API Keys
api_key <- "UNebmewdL7fjHIyVPkuQGjVOO"
api_secret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
access_token <- "868190366805229568-w9npyLxKg0jqi4IoZcU8lFUbDYY3JL6"
access_token_secret <- "EyNTquy0NfUK8V5lr0CZXKpN8qIJPQ9STXnaCaFkDf8K7"
my_oauth = setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
# The next two lines establish a connection to the Twitter API.
# The system will print a URL which should be copied in a browser to receive a PIN number.
# This PIN has to be entered in the R-console.
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
# repeat this process.
load(file = "my_oauth.Rdata") #Authenication data
load(file = 'tweets.RData') #LOAD THIS AS IT'S THE TWEET TEMPLATE
noTs_history = read.csv('noTs_history.csv', stringsAsFactors = F) #Restarting
noTs_history$X = NULL
noTs_history$Date = as.POSIXct(noTs_history$Date,format="%Y-%m-%d %H:%M:%S")
i = 1
Sys.time()
filterStream("tw_t.json",
timeout = 3600,
oauth = my_oauth,
track = c('taghut',
'mushrikeen',
'rafidah',
'kufar',
'kuffir',
'kuffar',
'jizya',
'khilafa',
'kufir'),
language = 'en')
#filterStream("tw_t.json", timeout = 30, oauth = my_oauth, track = c('dog', 'cat'), language = 'en')
#filterStream("tw_t.json", timeout = 10, oauth = my_oauth, track = 'hello', language = 'en')
tweets_t = parseTweets("tw_t.json")
#ex = tweets_gm$lang != 'ar'
#tweets_gm = tweets_gm[!ex,]
#ex = grepl('RT', tweets_gm$text, ignore.case = FALSE) #Remove the RTs
#tweets_gm = tweets_gm[!ex,]
#ex = grepl('taghut|mushrikeen|rafidah|kufar', tweets_gm$text, ignore.case = TRUE) #Remove anything without good morning in the main tweet text
#tweets_gm = tweets_gm[ex,]
#ex = is.na(tweets_gm$place_lat) #Remove any with missing place_latitude information
#tweets_gm = tweets_gm[!ex,]
#tweets.all = rbind(tweets.all, tweets_t) #Add to the collection
#
# res <- translate(content.vec = "Hello world",
#                  microsoft.client.id = "dc10d31f-4c1f-4e27-8928-8bc85bfd0e6d",
#                  microsoft.client.secret = "790dc39f94ba40ea86cc11eb71aa2f2a",
#                  source.lang = "en",
#                  target.lang = "de")
# res
removeURL <- function(x) gsub("http[[:alnum:][:punct:]]*", "", x)
tweets_t$text = removeURL(tweets_t$text)
removeStuff <- function(x) gsub("[[:punct:]]", " ", x)
tweets_t$text = removeStuff(tweets_t$text)
noTs = length(tweets_t$text)
noRTs = table(grepl('RT', tweets_t$text, ignore.case = FALSE))[2]
tweets_t$text <- iconv(tweets_t$text, 'UTF-8', 'ASCII')
corpus = Corpus(VectorSource(list(tweets_t$text)))
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, stripWhitespace)
#corpus = tm_map(corpus, function(x) iconv(enc2utf8(x), sub = "byte"))
corpus = tm_map(corpus, removeWords, stopwords('english'))
dtm_tweets = DocumentTermMatrix(VCorpus(VectorSource(corpus[[1]]$content)))
freq_tweets <- colSums(as.matrix(dtm_tweets))
#sentiments = calculate_sentiment(names(freq_tweets))
#sentiments = cbind(sentiments, as.data.frame(freq_tweets))
freq = as.data.frame(freq_tweets)
keywords = c('taghut', 'mushrikeen', 'rafidah', 'kufar', 'kuffir', 'kuffar', 'jizya', 'khilafa', 'kufir')
freq$Words = row.names(freq)
ex = freq$Words %in% keywords
freq = freq[!ex,]
noTs_new = data.frame('Date' = Sys.time(), 'noTs' = noTs, 'noRTs' = noRTs)
noTs_history = rbind(noTs_history, noTs_new)
date_for_file = gsub(' ', '_', noTs_new$Date)
date_for_file = gsub(':', '_', date_for_file)
length(freq)
View(freq)
length(freq$freq_tweets) == 0
if (length(freq$freq_tweets) == 0) {i=i+1} else {
png(paste('t', date_for_file, '.png', sep = ""))
par(mfrow=c(2,1))
par(mar=c(4,4,1,4))
set.seed(100)
wordcloud(row.names(freq),
freq$freq_tweets,
min.freq=max(freq$freq_tweets)*0.3,
colors=brewer.pal(6,"Dark2"),
random.order = T,
random.color = T,
rot.per = 0.3,
scale = c(1.5, 0.1))
plot(as.POSIXct(noTs_history$Date,format="%Y-%m-%d %H:%M:%S"),
noTs_history$noTs,
xlim = c(as.POSIXct(noTs_history$Date[1], format="%Y-%m-%d %H:%M:%S"),
as.POSIXct(noTs_history$Date[length(noTs_history$Date)], format="%Y-%m-%d %H:%M:%S")),
ylim = c(0, max(noTs_history$noTs)*1.2),
ylab = 'No. of tweets',
xlab = 'Date',
type = 'l',
lwd = 2)
points(as.POSIXct(noTs_history$Date),
noTs_history$noTs,
pch = 16)
lines(as.POSIXct(noTs_history$Date),
noTs_history$noRTs,
col = 'red',
lwd = 2)
points(as.POSIXct(noTs_history$Date),
noTs_history$noRTs,
pch = 16,
col = 'red')
legend(as.POSIXct(noTs_history$Date[1], format="%Y-%m-%d %H:%M:%S")+100,
max(noTs_history$noTs)*1.1,
lty=c(1,1),
lwd=c(2.5,2.5),
legend =c('Tweets', 'Re-tweets'),
col=c('black', 'red'))
dev.off()
i=i+1
tweet(paste("Update at", Sys.time(), '#radicalism #R'),
mediaPath = paste('t', date_for_file, '.png', sep = ""))
fn <- "tw_t.json"
if (file.exists(fn)) file.remove(fn)
write.csv(noTs_history, 'noTs_history.csv')
}
#tweet('test')
}
View(noTs_new)
load(file = "my_oauth.Rdata") #Authenication data
load(file = 'tweets.RData') #LOAD THIS AS IT'S THE TWEET TEMPLATE
noTs_history = read.csv('noTs_history.csv', stringsAsFactors = F) #Restarting
noTs_history$X = NULL
noTs_history$Date = as.POSIXct(noTs_history$Date,format="%Y-%m-%d %H:%M:%S")
View(noTs_history)
noTs_history[-1,]
noTs_history[-1]
noTs_history[-295,]
noTs_history = noTs_history[-295,]
View(noTs_history)
tweet('test')
setwd('C:\\Users\\rob.harrand\\Dropbox\\Kaggle\\JihadWatch')
# STREAMING
# The following four lines assign the right values to the variables that
# are needed for the API call.
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
# The string within the quotation marks has to be replaced with the actual
# consumerKey and consumerSecret.
consumerKey <- "UNebmewdL7fjHIyVPkuQGjVOO"
consumerSecret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
# Set API Keys
api_key <- "UNebmewdL7fjHIyVPkuQGjVOO"
api_secret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
access_token <- "868190366805229568-w9npyLxKg0jqi4IoZcU8lFUbDYY3JL6"
access_token_secret <- "EyNTquy0NfUK8V5lr0CZXKpN8qIJPQ9STXnaCaFkDf8K7"
my_oauth = setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
# The next two lines establish a connection to the Twitter API.
# The system will print a URL which should be copied in a browser to receive a PIN number.
# This PIN has to be entered in the R-console.
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
tweet('test')
load(file = "my_oauth.Rdata") #Authenication data
tweet('test')
# The following four lines assign the right values to the variables that
# are needed for the API call.
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
# The string within the quotation marks has to be replaced with the actual
# consumerKey and consumerSecret.
consumerKey <- "UNebmewdL7fjHIyVPkuQGjVOO"
consumerSecret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
# Set API Keys
api_key <- "UNebmewdL7fjHIyVPkuQGjVOO"
api_secret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
access_token <- "868190366805229568-w9npyLxKg0jqi4IoZcU8lFUbDYY3JL6"
access_token_secret <- "EyNTquy0NfUK8V5lr0CZXKpN8qIJPQ9STXnaCaFkDf8K7"
my_oauth = setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
# The next two lines establish a connection to the Twitter API.
# The system will print a URL which should be copied in a browser to receive a PIN number.
# This PIN has to be entered in the R-console.
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
# repeat this process.
tweet('test')
load(file = "my_oauth.Rdata") #Authenication data
load(file = 'tweets.RData') #LOAD THIS AS IT'S THE TWEET TEMPLATE
noTs_history = read.csv('noTs_history.csv', stringsAsFactors = F) #Restarting
noTs_history$X = NULL
noTs_history$Date = as.POSIXct(noTs_history$Date,format="%Y-%m-%d %H:%M:%S")
tweet('test')
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
load(file = 'tweets.RData') #LOAD THIS AS IT'S THE TWEET TEMPLATE
noTs_history = read.csv('noTs.csv') #New
noTs_history = read.csv('noTs_history.csv', stringsAsFactors = F) #Restarting
noTs_history$X = NULL
noTs_history$Date = as.POSIXct(noTs_history$Date,format="%Y-%m-%d %H:%M:%S")
tweet('test')
# STREAMING
# The following four lines assign the right values to the variables that
# are needed for the API call.
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
# The string within the quotation marks has to be replaced with the actual
# consumerKey and consumerSecret.
consumerKey <- "UNebmewdL7fjHIyVPkuQGjVOO"
consumerSecret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
# Set API Keys
api_key <- "UNebmewdL7fjHIyVPkuQGjVOO"
api_secret <- "XRvonr6F4VjlAwY0AOmKAdP1zqdx79IDkbZAl2xE71YvLOgCrp"
access_token <- "868190366805229568-w9npyLxKg0jqi4IoZcU8lFUbDYY3JL6"
access_token_secret <- "EyNTquy0NfUK8V5lr0CZXKpN8qIJPQ9STXnaCaFkDf8K7"
my_oauth = setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
# The next two lines establish a connection to the Twitter API.
# The system will print a URL which should be copied in a browser to receive a PIN number.
# This PIN has to be entered in the R-console.
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
# repeat this process.
load(file = 'tweets.RData') #LOAD THIS AS IT'S THE TWEET TEMPLATE
noTs_history = read.csv('noTs_history.csv', stringsAsFactors = F) #Restarting
noTs_history$X = NULL
noTs_history$Date = as.POSIXct(noTs_history$Date,format="%Y-%m-%d %H:%M:%S")
tweet('test')
