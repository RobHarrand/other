{
    "collab_server" : "",
    "contents" : "library(rgdal)\nlibrary(lubridate)\nlibrary(leaflet.extras)\nlibrary(leaflet)\nlibrary(shiny)\nlibrary(dplyr)\n\nschools = read.csv(\"calderdale_school_closures.csv\", stringsAsFactors = F)\n#met = read.csv(\"brad_temps.csv\", stringsAsFactors = F)\n\n#schools$Latitude = schools$Latitude + rnorm(length(schools$Latitude), mean=0.0001, sd=0.0001)\n#schools$Longitude = schools$Longitude + rnorm(length(schools$Longitude), mean=0.0001, sd=0.0001)\n\n\n#range(schools$EFF_DATE_FROM)\n#met = met[met$Year %in% 2009:2018,]\n\n# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html\n#leeds <- readOGR(\"C:\\\\Users\\\\rob.harrand\\\\Desktop\\\\WORK\\\\Data hobbies\\\\Leeds open\\\\Cycle_routes\\\\PLAN_CYCLE_ROUTES.shp\",\n#                   GDAL1_integer64_policy = TRUE)\n\n#load('leeds.Rdata')\n#load('C:\\\\Users\\\\rob.harrand\\\\Desktop\\\\WORK\\\\Data hobbies\\\\Leeds open\\\\Cycle_routes\\\\leeds_cycle\\\\leeds.Rdata')\n#save(leeds, file='leeds.Rdata')\n\n\n#leeds <- readOGR(\"PLAN_CYCLE_ROUTES.shp\", GDAL1_integer64_policy = TRUE)\n\nschools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)\nschools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')\nschools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')\n\nsnow = schools[grepl(\"snow\", schools$REASON, ignore.case = T),]\nstrike = schools[grepl(\"strike\", schools$REASON, ignore.case = T),]\n\n# met$Month = sapply(as.integer(met$Month), function(n) sprintf(\"%02d\", n))\n# met$Month = month.abb[met$Month]\n# met$Year = as.character(met$Year)\n# met$Year = substring(met$Year, 3, 4)\n# met$date_month = paste(met$Month, met$Year, sep = \"-\")\n# \n# merged = merge(schools, met, by = 'date_month', all.x = T)\n# \nsnow_by_est = as.data.frame(table(snow$EST_NAME))\nstrike_by_est = as.data.frame(table(strike$EST_NAME))\n\n\n# merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]\n# merged = merged[!duplicated(merged$EST_NAME),]\n# merged = merged[order(merged$EST_NAME),]\n# merged$freq = by_est$Freq\n\nsnow = snow[order(snow$EST_NAME, snow$EFF_DATE_FROM, decreasing = T),]\nsnow = snow[!duplicated(snow$EST_NAME),]\nsnow = snow[order(snow$EST_NAME),]\nsnow$freq = snow_by_est$Freq\n\nstrike = strike[order(strike$EST_NAME, strike$EFF_DATE_FROM, decreasing = T),]\nstrike = strike[!duplicated(strike$EST_NAME),]\nstrike = strike[order(strike$EST_NAME),]\nstrike$freq = strike_by_est$Freq\n\n\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n  \n  leafletOutput(\"mymap\", height = 500),\n  \n  column(6,\n         h3(\"Emergency School Closures in the Calderdale Area\"),\n         h5(\"- The overlaid heatmap shows regions of school locations\"),\n         h5(\"- School positions are approximate (based upon postcode + small random shift to prevent points overlaying)\"),\n         h5(\"- For snow-related closures, click 'Snow' from the top-right panel to display points\"),\n         h5(\"- For strike-related closures, click 'Strike' from the top-right panel to display points\"),\n         h5(\"- Click a point to display details\"),\n         h5(\"- Use the mouse-wheel to zoom in/out\")\n  ),\n  \n  column(4,\n         tags$br(),\n         \n         h4(\"Citations\"),\n         \n         h6(\"Emergency School Closures Data: Calderdale Council, 2018. This information is licensed under the terms of the UK Open Government Licence (OGL v3)\"),\n         h6(a(\"Emergency School Closures Data link\", target=\"_blank\", href=\"https://dataworks.calderdale.gov.uk/dataset/emergency-school-closures\")),\n         \n         h6(a(\"Postcode batch converter tool link\", target=\"_blank\", href='https://gridreferencefinder.com/postcodeBatchConverter/')),\n         h6(\"(Rob Harrand, March 2018)\")\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  # #Map\n  # points <- eventReactive(input$recalc, {\n  #   cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)\n  # }, ignoreNULL = FALSE)\n  \n  \n  icon1 <- awesomeIcons(\n    icon = 'ion-ios-snowy',\n    iconColor = 'white',\n    library = 'ion',\n    markerColor = 'gray'\n  )\n  \n  icon2 <- awesomeIcons(\n    icon = 'ion-alert',\n    iconColor = 'black',\n    library = 'ion',\n    markerColor = 'red'\n  )\n  \n  \n\n#Thanks to https://gridreferencefinder.com/postcodeBatchConverter/\n  \n  output$mymap <- renderLeaflet({\n    \n    leaflet(snow) %>%\n      addTiles() %>%\n      addProviderTiles(providers$CartoDB.Positron) %>%\n      #addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%\n      addAwesomeMarkers(lat=snow$Latitude,\n                        lng=snow$Longitude,\n                        group = 'Snow',\n                        icon=icon1,\n                        popup = paste(\"School: \", snow$EST_NAME, \n                                      \"</br>\",\n                                      \"Number of Snow-related Closures: \", snow$freq, \n                                      \"</br>\",\n                                      \"Most Recent Snow-related Closure: \", snow$EFF_DATE_FROM, \n                                      sep = \"\")) %>%\n      addAwesomeMarkers(lat=strike$Latitude, \n                        lng=strike$Longitude,\n                        group = 'Strike',\n                        icon=icon2,\n                        popup = paste(\"School: \", strike$EST_NAME, \n                                      \"</br>\",\n                                      \"Number of Strike-related Closures: \", strike$freq, \n                                      \"</br>\",\n                                      \"Most Recent Strike-related Closure: \", strike$EFF_DATE_FROM, \n                                      sep = \"\")) %>%\n      #addPolylines(weight = 4, opacity = 1) %>%\n      addWebGLHeatmap(lat=schools$Latitude, \n                      lng=schools$Longitude, \n                      size = 2500,\n                      opacity = 0.35) %>%\n      addLayersControl(overlayGroups = c(\"Snow\",\"Strike\") , options = layersControlOptions(collapsed = FALSE)) %>%\n      hideGroup(\"Snow\") %>%\n      hideGroup(\"Strike\")\n    \n  })\n  \n}\n\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n",
    "created" : 1520255558536.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3213915346",
    "id" : "93427459",
    "lastKnownWriteTime" : 1520345975,
    "last_content_update" : 1520345975586,
    "path" : "C:/Users/rob.harrand/Desktop/WORK/Data hobbies/Leeds open/School_closures/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}