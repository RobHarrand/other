merged = merge(schools, met, by = 'date_month')
View(schools)
View(met)
merged = merge(schools, met, by = 'date_month', all = T)
merged = merge(schools, met, by = 'date_month', all.x = T)
View(merged)
shiny::runApp()
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
View(schools)
runApp()
View(schools)
library(dplyr)
merged
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
#met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
met$Month = month.abb[met$Month]
met$Year = as.character(met$Year)
met$Year = substring(met$Year, 3, 4)
met$date_month = paste(met$Month, met$Year, sep = "-")
merged = merge(schools, met, by = 'date_month', all.x = T)
View(merged)
table(merged$EST_NAME, merged$EFF_DATE_FROM)
by_est = table(merged$EST_NAME, merged$EFF_DATE_FROM)
by_est = as.data.frame(table(merged$EST_NAME, merged$EFF_DATE_FROM))
View(by_est)
by_est = as.data.frame(table(merged$EST_NAME))
View(by_est)
View(merged)
merged = merged[order(merged$EFF_DATE_FROM),]
merged = merged[order(-merged$EFF_DATE_FROM),]
merged = merged[-order(merged$EFF_DATE_FROM),]
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
#met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
met$Month = month.abb[met$Month]
met$Year = as.character(met$Year)
met$Year = substring(met$Year, 3, 4)
met$date_month = paste(met$Month, met$Year, sep = "-")
merged = merge(schools, met, by = 'date_month', all.x = T)
by_est = as.data.frame(table(merged$EST_NAME))
merged = merged[order(merged$EFF_DATE_FROM, decreasing = T),]
View(merged)
merged = unique(merged$EST_NAME)
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
#met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
met$Month = month.abb[met$Month]
met$Year = as.character(met$Year)
met$Year = substring(met$Year, 3, 4)
met$date_month = paste(met$Month, met$Year, sep = "-")
merged = merge(schools, met, by = 'date_month', all.x = T)
by_est = as.data.frame(table(merged$EST_NAME))
merged = merged[order(merged$EFF_DATE_FROM, decreasing = T),]
unique(merged$EST_NAME)
duplicated(merged$EST_NAME)
merged = merged[!duplicated(merged$EST_NAME),]
View(merged)
View(by_est)
merged = merged[order(merged$EST_NAME),]
merged$freq = by_est$Freq
View(merged)
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
#met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
met$Month = month.abb[met$Month]
met$Year = as.character(met$Year)
met$Year = substring(met$Year, 3, 4)
met$date_month = paste(met$Month, met$Year, sep = "-")
merged = merge(schools, met, by = 'date_month', all.x = T)
by_est = as.data.frame(table(merged$EST_NAME))
merged = merged[order(merged$EFF_DATE_FROM, decreasing = T),]
View(merged)
duplicated(merged$EST_NAME)
merged$EST_NAME
merged = merged[order(merged$EFF_DATE_FROM, decreasing = T),]
View(merged)
merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
View(merged)
merged = merged[!duplicated(merged$EST_NAME),]
merged = merged[order(merged$EST_NAME),]
merged$freq = by_est$Freq
View(merged)
runApp()
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
met$Month = month.abb[met$Month]
met$Year = as.character(met$Year)
met$Year = substring(met$Year, 3, 4)
met$date_month = paste(met$Month, met$Year, sep = "-")
merged = merge(schools, met, by = 'date_month', all.x = T)
by_est = as.data.frame(table(merged$EST_NAME))
merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
merged = merged[!duplicated(merged$EST_NAME),]
merged = merged[order(merged$EST_NAME),]
merged$freq = by_est$Freq
View(merged)
runApp()
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
#met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
#met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
# met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
# met$Month = month.abb[met$Month]
# met$Year = as.character(met$Year)
# met$Year = substring(met$Year, 3, 4)
# met$date_month = paste(met$Month, met$Year, sep = "-")
#
# merged = merge(schools, met, by = 'date_month', all.x = T)
#
by_est = as.data.frame(table(schools$EST_NAME))
#
# merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
# merged = merged[!duplicated(merged$EST_NAME),]
# merged = merged[order(merged$EST_NAME),]
# merged$freq = by_est$Freq
schools$freq = by_est$Freq
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
#met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
#met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
# met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
# met$Month = month.abb[met$Month]
# met$Year = as.character(met$Year)
# met$Year = substring(met$Year, 3, 4)
# met$date_month = paste(met$Month, met$Year, sep = "-")
#
# merged = merge(schools, met, by = 'date_month', all.x = T)
#
by_est = as.data.frame(table(schools$EST_NAME))
#
# merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
# merged = merged[!duplicated(merged$EST_NAME),]
# merged = merged[order(merged$EST_NAME),]
# merged$freq = by_est$Freq
schools = schools[order(schools$EST_NAME, schools$EFF_DATE_FROM, decreasing = T),]
schools = schools[!duplicated(schools$EST_NAME),]
schools = schools[order(schools$EST_NAME),]
schools$freq = by_est$Freq
View(schools)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
View(schools)
snow = schools[grepl("snow", merged$REASON, ignore.case = T)]
snow = schools[grepl("snow", schools$REASON, ignore.case = T)]
snow = schools[grepl("snow", schools$REASON, ignore.case = T),]
strike = schools[grepl("strike", schools$REASON, ignore.case = T),]
snow_by_est = as.data.frame(table(snow$EST_NAME))
strike_by_est = as.data.frame(table(strike$EST_NAME))
snow = snow[order(snow$EST_NAME, snow$EFF_DATE_FROM, decreasing = T),]
snow = snow[!duplicated(snow$EST_NAME),]
snow = snow[order(snow$EST_NAME),]
snow$freq = by_est$Freq
strike = strike[order(strike$EST_NAME, strike$EFF_DATE_FROM, decreasing = T),]
strike = strike[!duplicated(strike$EST_NAME),]
strike = strike[order(strike$EST_NAME),]
strike$freq = by_est$Freq
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
#met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
#met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
snow = schools[grepl("snow", schools$REASON, ignore.case = T),]
strike = schools[grepl("strike", schools$REASON, ignore.case = T),]
# met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
# met$Month = month.abb[met$Month]
# met$Year = as.character(met$Year)
# met$Year = substring(met$Year, 3, 4)
# met$date_month = paste(met$Month, met$Year, sep = "-")
#
# merged = merge(schools, met, by = 'date_month', all.x = T)
#
snow_by_est = as.data.frame(table(snow$EST_NAME))
strike_by_est = as.data.frame(table(strike$EST_NAME))
# merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
# merged = merged[!duplicated(merged$EST_NAME),]
# merged = merged[order(merged$EST_NAME),]
# merged$freq = by_est$Freq
snow = snow[order(snow$EST_NAME, snow$EFF_DATE_FROM, decreasing = T),]
snow = snow[!duplicated(snow$EST_NAME),]
snow = snow[order(snow$EST_NAME),]
snow$freq = snow_by_est$Freq
strike = strike[order(strike$EST_NAME, strike$EFF_DATE_FROM, decreasing = T),]
strike = strike[!duplicated(strike$EST_NAME),]
strike = strike[order(strike$EST_NAME),]
strike$freq = strike_by_est$Freq
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
View(schools)
runApp()
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
snow = schools[grepl("snow", schools$REASON, ignore.case = T),]
strike = schools[grepl("strike", schools$REASON, ignore.case = T),]
View(snow)
snow_by_est = as.data.frame(table(snow$EST_NAME))
strike_by_est = as.data.frame(table(strike$EST_NAME))
# merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
# merged = merged[!duplicated(merged$EST_NAME),]
# merged = merged[order(merged$EST_NAME),]
# merged$freq = by_est$Freq
snow = snow[order(snow$EST_NAME, snow$EFF_DATE_FROM, decreasing = T),]
snow = snow[!duplicated(snow$EST_NAME),]
snow = snow[order(snow$EST_NAME),]
snow$freq = snow_by_est$Freq
strike = strike[order(strike$EST_NAME, strike$EFF_DATE_FROM, decreasing = T),]
strike = strike[!duplicated(strike$EST_NAME),]
strike = strike[order(strike$EST_NAME),]
strike$freq = strike_by_est$Freq
View(snow)
runApp()
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
#met = read.csv("brad_temps.csv", stringsAsFactors = F)
#range(schools$EFF_DATE_FROM)
#met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
snow = schools[grepl("snow", schools$REASON, ignore.case = T),]
strike = schools[grepl("strike", schools$REASON, ignore.case = T),]
# met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
# met$Month = month.abb[met$Month]
# met$Year = as.character(met$Year)
# met$Year = substring(met$Year, 3, 4)
# met$date_month = paste(met$Month, met$Year, sep = "-")
#
# merged = merge(schools, met, by = 'date_month', all.x = T)
#
snow_by_est = as.data.frame(table(snow$EST_NAME))
strike_by_est = as.data.frame(table(strike$EST_NAME))
# merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
# merged = merged[!duplicated(merged$EST_NAME),]
# merged = merged[order(merged$EST_NAME),]
# merged$freq = by_est$Freq
snow = snow[order(snow$EST_NAME, snow$EFF_DATE_FROM, decreasing = T),]
snow = snow[!duplicated(snow$EST_NAME),]
snow = snow[order(snow$EST_NAME),]
snow$freq = snow_by_est$Freq
strike = strike[order(strike$EST_NAME, strike$EFF_DATE_FROM, decreasing = T),]
strike = strike[!duplicated(strike$EST_NAME),]
strike = strike[order(strike$EST_NAME),]
strike$freq = strike_by_est$Freq
View(snow)
runApp()
View(schools)
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
table(schools$Postcode, schools$EST_NAME)
x = as.data.frame(table(schools$Postcode, schools$EST_NAME))
View(x)
table(schools$Latitude, schools$EST_NAME)
table(schools$Latitude)
table(schools$EST_NAME)
x = table(schools$Latitude)
y = table(schools$EST_NAME)
plot(x,y)
x
x = as.data.frame(table(schools$Latitude))
View(x)
x = as.data.frame(table(schools$Latitude))
y = as.data.frame(table(schools$EST_NAME))
plot(x$Freq,y$Freq)
View(x)
View(y)
library(plyr)
count(schools, 'EST_NAME')
?count
tally(schools, 'EST_NAME')
count(schools, 'EST_NAME', sort = F)
count_(schools, 'EST_NAME', sort = F)
runApp()
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
View(schools)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
length(schools$Latitude)
rnorm(length(schools$Latitude), mean=0.001, sd=0.01)
schools$Latitude = schools$Latitude + rnorm(length(schools$Latitude), mean=0.001, sd=0.01)
runApp()
runApp()
runApp()
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
View(schools)
runApp()
runApp()
runApp()
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
View(schools)
View(schools)
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
library(dplyr)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
#met = read.csv("brad_temps.csv", stringsAsFactors = F)
#schools$Latitude = schools$Latitude + rnorm(length(schools$Latitude), mean=0.0001, sd=0.0001)
#schools$Longitude = schools$Longitude + rnorm(length(schools$Longitude), mean=0.0001, sd=0.0001)
#range(schools$EFF_DATE_FROM)
#met = met[met$Year %in% 2009:2018,]
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
#load('leeds.Rdata')
#load('C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\leeds.Rdata')
#save(leeds, file='leeds.Rdata')
#leeds <- readOGR("PLAN_CYCLE_ROUTES.shp", GDAL1_integer64_policy = TRUE)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
snow = schools[grepl("snow", schools$REASON, ignore.case = T),]
strike = schools[grepl("strike", schools$REASON, ignore.case = T),]
# met$Month = sapply(as.integer(met$Month), function(n) sprintf("%02d", n))
# met$Month = month.abb[met$Month]
# met$Year = as.character(met$Year)
# met$Year = substring(met$Year, 3, 4)
# met$date_month = paste(met$Month, met$Year, sep = "-")
#
# merged = merge(schools, met, by = 'date_month', all.x = T)
#
snow_by_est = as.data.frame(table(snow$EST_NAME))
strike_by_est = as.data.frame(table(strike$EST_NAME))
# merged = merged[order(merged$EST_NAME, merged$EFF_DATE_FROM, decreasing = T),]
# merged = merged[!duplicated(merged$EST_NAME),]
# merged = merged[order(merged$EST_NAME),]
# merged$freq = by_est$Freq
snow = snow[order(snow$EST_NAME, snow$EFF_DATE_FROM, decreasing = T),]
snow = snow[!duplicated(snow$EST_NAME),]
snow = snow[order(snow$EST_NAME),]
snow$freq = snow_by_est$Freq
strike = strike[order(strike$EST_NAME, strike$EFF_DATE_FROM, decreasing = T),]
strike = strike[!duplicated(strike$EST_NAME),]
strike = strike[order(strike$EST_NAME),]
strike$freq = strike_by_est$Freq
View(snow)
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
schools$date_month = substring(schools$EFF_DATE_FROM, 4, 9)
schools$EFF_DATE_FROM = as.Date(schools$EFF_DATE_FROM, format = '%d-%b-%y')
schools$EFF_DATE_TO = as.Date(schools$EFF_DATE_TO, format = '%d-%b-%y')
snow = schools[grepl("snow", schools$REASON, ignore.case = T),]
strike = schools[grepl("strike", schools$REASON, ignore.case = T),]
View(snow)
runApp()
runApp()
runApp()
runApp()
runApp()
schools = read.csv("calderdale_school_closures.csv", stringsAsFactors = F)
View(schools)
