"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude, size = 100)
leaflet(DAT) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude, size = 1000)
leaflet(DAT) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude, size = 5000)
leaflet(DAT) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude, size = 2500)
leaflet(DAT) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron) %>%
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude, size = 2500)
leaflet(DAT) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron) %>%
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
size = 2500,
opacity = 0.5)
leaflet(DAT) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron) %>%
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
size = 2000,
opacity = 0.2)
leaflet(DAT) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron) %>%
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
size = 2000,
opacity = 0.4)
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
leaflet(DAT) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron) %>%
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties$Accident.Date,
"</br>",
"Time: ", cycle_casualties$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
size = 2500,
opacity = 0.5)
runApp('leeds_cycle')
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
GDAL1_integer64_policy = TRUE)
PRO <- sp::CRS('+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0')
DAT <- sp::spTransform(leeds,PRO)
#Cycle casualties data
cycle_casualties = read.csv("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\cycle_casualties.csv")
#cycle_casualties$Accident.Date = as.character(cycle_casualties$Accident.Date)
cycle_casualties$Accident.Date = as.POSIXct(cycle_casualties$Accident.Date, format = '%d/%m/%Y')
cycle_casualties$Day = day(cycle_casualties$Accident.Date)
cycle_casualties$Month = month(cycle_casualties$Accident.Date)
cycle_casualties$Year = year(cycle_casualties$Accident.Date)
#cycle_casualties$X1st.Road.Class = as.character(cycle_casualties$X1st.Road.Class)
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 3] = 'A'
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 4] = 'B'
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 5] = 'C'
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 6] = 'Unclassified'
#cycle_casualties$Road.Surface = as.character(cycle_casualties$Road.Surface)
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 1] = 'Dry'
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 2] = 'Wet/damp'
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 3] = 'Snow'
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 4] = 'Frost/Ice'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 1] = 'Daylight: Street lights present'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 4] = 'Darkness: Street lights present and lit'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 5] = 'Darkness: Street lights present but unlit'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 6] = 'Darkness: No street lighting'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 7] = 'Darkness: Street lighting unknown'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 1] = 'Fine without high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 2] = 'Raining without high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 3] = 'Snowing without high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 4] = 'Fine with high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 5] = 'Raining with high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 7] = 'Fog or mist'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 8] = 'Other'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 9] = 'Unknown'
cycle_casualties$Casualty.Class[cycle_casualties$Casualty.Class == 1] = 'Driver or rider'
cycle_casualties$Casualty.Class[cycle_casualties$Casualty.Class == 2] = 'Vehicle or pillion passenger'
cycle_casualties$Casualty.Class[cycle_casualties$Casualty.Class == 3] = 'Pedestrian'
cycle_casualties$Casualty.Severity[cycle_casualties$Casualty.Severity == 1] = 'Fatal'
cycle_casualties$Casualty.Severity[cycle_casualties$Casualty.Severity == 2] = 'Serious'
cycle_casualties$Casualty.Severity[cycle_casualties$Casualty.Severity == 3] = 'Slight'
cycle_casualties$Sex.of.Casualty[cycle_casualties$Sex.of.Casualty == 1] = 'Male'
cycle_casualties$Sex.of.Casualty[cycle_casualties$Sex.of.Casualty == 2] = 'Female'
cycle_casualties$Type.of.Vehicle[cycle_casualties$Type.of.Vehicle == 1] = 'Pedal cycle'
View(cycle_casualties)
cycle_casualties_slight = cycle_casualties[cycle_casualties$Casualty.Severity == 'Slight',]
table(cycle_casualties$Casualty.Severity)
cycle_casualties_slight = cycle_casualties[cycle_casualties$Casualty.Severity == 'Slight',]
cycle_casualties_serious = cycle_casualties[cycle_casualties$Casualty.Severity == 'Serious',]
cycle_casualties_fatal = cycle_casualties[cycle_casualties$Casualty.Severity == 'Fatal',]
leaflet(DAT) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron) %>%
#addMarkers(lat=cycle_bays$Lat, lng=cycle_bays$Long) %>%
addMarkers(lat=cycle_casualties_slight$Latitude,
lng=cycle_casualties_slight$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties_slight$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties_slight$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties_slight$Accident.Date,
"</br>",
"Time: ", cycle_casualties_slight$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties_slight$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties_slight$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties_slight$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties_slight$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties_slight$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties_slight$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties_slight$Age.of.Casualty,
sep = "")) %>%
addMarkers(lat=cycle_casualties_serious$Latitude,
lng=cycle_casualties_serious$Longitude,
popup = paste("Number of vehicles: ", cycle_casualties_serious$Number.of.Vehicles,
"</br>",
"Number of casualities: ", cycle_casualties_serious$Number.of.Casualties,
"</br>",
"Accident date: ", cycle_casualties_serious$Accident.Date,
"</br>",
"Time: ", cycle_casualties_serious$Time..24hr.,
"</br>",
"Road class: ", cycle_casualties_serious$Road.Surface,
"</br>",
"Lighting conditions: ", cycle_casualties_serious$Lighting.Conditions,
"</br>",
"Weather conditions: ", cycle_casualties_serious$Weather.Conditions,
"</br>",
"Casualty class: ", cycle_casualties_serious$Casualty.Class,
"</br>",
"Casualty severity: ", cycle_casualties_serious$Casualty.Severity,
"</br>",
"Sex of casualty: ", cycle_casualties_serious$Sex.of.Casualty,
"</br>",
"Age of casualty: ", cycle_casualties_serious$Age.of.Casualty,
sep = "")) %>%
addPolylines() %>%
addWebGLHeatmap(lat=cycle_casualties$Latitude,
lng=cycle_casualties$Longitude,
size = 2500,
opacity = 0.45) %>%
addLayersControl(overlayGroups = c("Slight","Serious") , baseGroups = c("background 1","background 2"), options = layersControlOptions(collapsed = FALSE))
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
GDAL1_integer64_policy = TRUE)
PRO <- sp::CRS('+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0')
DAT <- sp::spTransform(leeds,PRO)
#Cycle casualties data
cycle_casualties = read.csv("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\cycle_casualties.csv")
#cycle_casualties$Accident.Date = as.character(cycle_casualties$Accident.Date)
cycle_casualties$Accident.Date = as.POSIXct(cycle_casualties$Accident.Date, format = '%d/%m/%Y')
cycle_casualties$Day = day(cycle_casualties$Accident.Date)
cycle_casualties$Month = month(cycle_casualties$Accident.Date)
cycle_casualties$Year = year(cycle_casualties$Accident.Date)
#cycle_casualties$X1st.Road.Class = as.character(cycle_casualties$X1st.Road.Class)
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 3] = 'A'
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 4] = 'B'
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 5] = 'C'
cycle_casualties$X1st.Road.Class[cycle_casualties$X1st.Road.Class == 6] = 'Unclassified'
#cycle_casualties$Road.Surface = as.character(cycle_casualties$Road.Surface)
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 1] = 'Dry'
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 2] = 'Wet/damp'
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 3] = 'Snow'
cycle_casualties$Road.Surface[cycle_casualties$Road.Surface == 4] = 'Frost/Ice'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 1] = 'Daylight: Street lights present'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 4] = 'Darkness: Street lights present and lit'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 5] = 'Darkness: Street lights present but unlit'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 6] = 'Darkness: No street lighting'
cycle_casualties$Lighting.Conditions[cycle_casualties$Lighting.Conditions == 7] = 'Darkness: Street lighting unknown'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 1] = 'Fine without high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 2] = 'Raining without high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 3] = 'Snowing without high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 4] = 'Fine with high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 5] = 'Raining with high winds'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 7] = 'Fog or mist'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 8] = 'Other'
cycle_casualties$Weather.Conditions[cycle_casualties$Weather.Conditions == 9] = 'Unknown'
cycle_casualties$Casualty.Class[cycle_casualties$Casualty.Class == 1] = 'Driver or rider'
cycle_casualties$Casualty.Class[cycle_casualties$Casualty.Class == 2] = 'Vehicle or pillion passenger'
cycle_casualties$Casualty.Class[cycle_casualties$Casualty.Class == 3] = 'Pedestrian'
cycle_casualties$Casualty.Severity[cycle_casualties$Casualty.Severity == 1] = 'Fatal'
cycle_casualties$Casualty.Severity[cycle_casualties$Casualty.Severity == 2] = 'Serious'
cycle_casualties$Casualty.Severity[cycle_casualties$Casualty.Severity == 3] = 'Slight'
cycle_casualties$Sex.of.Casualty[cycle_casualties$Sex.of.Casualty == 1] = 'Male'
cycle_casualties$Sex.of.Casualty[cycle_casualties$Sex.of.Casualty == 2] = 'Female'
cycle_casualties$Type.of.Vehicle[cycle_casualties$Type.of.Vehicle == 1] = 'Pedal cycle'
cycle_casualties_slight = cycle_casualties[cycle_casualties$Casualty.Severity == 'Slight',]
cycle_casualties_serious = cycle_casualties[cycle_casualties$Casualty.Severity == 'Serious',]
cycle_casualties_fatal = cycle_casualties[cycle_casualties$Casualty.Severity == 'Fatal',]
runApp('leeds_cycle')
runApp('leeds_cycle')
?addPolylines
?addLayersControl
?layersControlOptions
?addMarkers
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
ui <- fluidPage(
leafletOutput("mymap")
?leafletOutput
)
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
cycle_casualties = read.csv("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\cycle_casualties.csv")
cycle_casualties$Time..24hr.
runApp('leeds_cycle')
leeds <- readOGR("PLAN_CYCLE_ROUTES.shp",
GDAL1_integer64_policy = TRUE)
leeds <- readOGR("PLAN_CYCLE_ROUTES.shp",
GDAL1_integer64_policy = TRUE)
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
# leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
#                   GDAL1_integer64_policy = TRUE)
leeds <- readOGR("PLAN_CYCLE_ROUTESs.shp",
GDAL1_integer64_policy = TRUE)
dsn=path.expand("PLAN_CYCLE_ROUTES.shp")
runApp('leeds_cycle')
leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES",
GDAL1_integer64_policy = TRUE)
runApp('leeds_cycle')
runApp('leeds_cycle')
?readOGR
dsn <- system.file("PLAN_CYCLE_ROUTES.shp", package = "rgdal")[1]
dsn <- system.file("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp", package = "rgdal")[1]
dsn
dsn <- system.file("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp", package = "rgdal")
leeds <- readOGR("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\PLAN_CYCLE_ROUTES.shp",
GDAL1_integer64_policy = TRUE)
save(leeds, 'leeds.R')
?save
save(leeds, 'leeds.Rdata')
save(leeds, file='leeds.Rdata')
load('leeds.Rdata')
getwd()
cycle_bays = read.csv("leeds_cycle/cycle_bays.csv")
View(cycle_bays)
?addLayersControl
library(rgdal)
library(lubridate)
library(leaflet.extras)
library(leaflet)
library(shiny)
?addLayersControl
runApp('leeds_cycle')
runApp('leeds_cycle')
getwd()
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
runApp('leeds_cycle')
cycle_bays = read.csv("C:\\Users\\rob.harrand\\Desktop\\WORK\\Data hobbies\\Leeds open\\Cycle_routes\\leeds_cycle\\cycle_bays.csv")
View(cycle_bays)
runApp('leeds_cycle')
runApp('leeds_cycle')
